name: CMake Builds

on:
  push:
    branches: [ "main", "dev" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Debug, Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: gcc

    steps:
    - name: Install Ninja
      # Install Ninja, a build system that can be used as an alternative to make.
      # Ninja is faster and recommended for large projects.
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get install ninja-build -y

    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Set the generator
      id: set-generator
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          echo "generator='Visual Studio 17 2022'" >> "$GITHUB_OUTPUT"
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          echo "generator='Xcode'" >> "$GITHUB_OUTPUT"
        else
          echo "generator='Ninja'" >> "$GITHUB_OUTPUT"
        fi

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }} -G ${{ steps.set-generator.outputs.generator }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --target all -j 4

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Package
      if: matrix.build_type == 'Release'
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: cpack

    - name: Upload Release Artifacts
      if: matrix.build_type == 'Release'
      uses: actions/upload-artifact@v4
      with:
        name: "${{ matrix.os }}-${{ matrix.c_compiler }}"
        path: "${{ steps.strings.outputs.build-output-dir }}/Packages"
        overwrite: true
        if-no-files-found: 'warn'
