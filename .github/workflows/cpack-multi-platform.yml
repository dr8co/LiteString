name: CPack Multi-Platform

on:
  push:
    branches: [ "main", "dev" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        c_compiler: [gcc-13, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc-13
            cpp_compiler: g++-13
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc-13
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: ubuntu-latest
            c_compiler: clang
          - os: macos-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: gcc-13

    steps:
      - name: Upgrade Build Tools and install Ninja
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt update && sudo apt upgrade -y && sudo apt install ninja-build -y

      - uses: actions/checkout@v4

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            echo "build-output-dir=${{ github.workspace }}\build" >> "$GITHUB_OUTPUT"
          else
            echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
          fi

      - name: Set the generator
        id: set-generator
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            echo "generator='Visual Studio 17 2022'" >> "$GITHUB_OUTPUT"
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            echo "generator='Xcode'" >> "$GITHUB_OUTPUT"
          else
            echo "generator='Ninja'" >> "$GITHUB_OUTPUT"
          fi

      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=Release -S ${{ github.workspace }}
          -G ${{ steps.set-generator.outputs.generator }}
          -DBUILD_SHARED_LIBS=ON -DBUILD_TESTING=OFF -DBUILD_EXAMPLES=OFF

      - name: Build Shared Libraries
        run: |
          cmake --build ${{ steps.strings.outputs.build-output-dir }} --config Release -j 4

      - name: Package
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: cpack

      - name: Upload Release Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: "${{ matrix.os }}-${{ matrix.c_compiler }}-release"
          path: "${{ steps.strings.outputs.build-output-dir }}/Packages"
          overwrite: true
          if-no-files-found: 'error'
